/*
   Rate of convergence of the sBBM system
   exact solution and the corresponding right hand side
   
   to run this script : FreeFem++ sBBM_rate.edp -ns -v 0

   Copyright (C) 2020 Georges SADAKA and Denys Dutykh

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.

   -------------------------------------------------------------
   An additional file of the main file for computing the rate of 
   convergence of the sBBM system
   -------------------------------------------------------------
   Author 1: Georges SADAKA, LMRS -- University of Rouen
   Author 2: Denys Dutykh, CNRS -- LAMA, USMB          
   E-mail 1: Georges.SADAKA@univ-rouen.fr                  
   E-mail 2: Denys.Dutykh@univ-smb.fr   
   Web 1:  http://georges-sadaka.fr/ 
   Web 2:  http://www.denys-dutykh.com/
   Blog 2:   http://dutykh.github.io/    
   GitHub 1: https://github.com/GeorgesSadaka/
   GitHub 2: https://github.com/dutykh/  
   -----------------------------------------------------------------------
   Distributed under GNU General Public License      
   --------------------------------------------------
*/

macro hex(t)(0.1e1 - 0.5e0 * cos(0.2e1 * pi * x / L) * cos(0.2e1 * pi * y / L) )//
macro ETAex(t)(0.2e0 * cos(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro Uex(t)(-0.5e0 * sin(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro Vex(t)(-0.5e0 * cos(-0.2e1 * pi * x / L + t) * sin(-0.2e1 * pi * y / L + t) )//
macro ETAexx(t)(0.4e0 * pi / L * sin(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro ETAexy(t)(0.4e0 * cos(-0.2e1 * pi * x / L + t) * pi / L * sin(-0.2e1 * pi * y / L + t) )//
macro Uexx(t)(0.10e1 * pi / L * cos(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro Uexy(t)(-0.10e1 * sin(-0.2e1 * pi * x / L + t) * pi / L * sin(-0.2e1 * pi * y / L + t) )//
macro Vexx(t)(-0.10e1 * sin(-0.2e1 * pi * x / L + t) * pi / L * sin(-0.2e1 * pi * y / L + t) )//
macro Vexy(t)(0.10e1 * pi / L * cos(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro ETAexxx(t)(-0.8e0 * pi ^ 2 / L ^ 2 * cos(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro ETAexyy(t)(-0.8e0 * pi ^ 2 / L ^ 2 * cos(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro Uexxx(t)(0.20e1 * pi ^ 2 / L ^ 2 * sin(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro Uexyy(t)(0.20e1 * pi ^ 2 / L ^ 2 * sin(-0.2e1 * pi * x / L + t) * cos(-0.2e1 * pi * y / L + t) )//
macro Vexxx(t)(0.20e1 * pi ^ 2 / L ^ 2 * cos(-0.2e1 * pi * x / L + t) * sin(-0.2e1 * pi * y / L + t) )//
macro Vexyy(t)(0.20e1 * pi ^ 2 / L ^ 2 * cos(-0.2e1 * pi * x / L + t) * sin(-0.2e1 * pi * y / L + t) )//
macro feta(t,te)(((((-0.5e0 * h2hy - 0.1e1 * h2hx) * A + 0.4e0 * b * h2) * pi * dx(te) + ((-0.15e1 * h2hy - 0.1e1 * h2hx) * A + 0.4e0 * b * h2) * pi * dy(te) + ((hhx2 - 0.1e1 * hhxhy) * A + h) * te * pi) * cos((pi * (-0.2e1 * x - 0.2e1 * y) + 0.2e1 * t * L) / L) + (-0.25e0 * hy - 0.25e0 * hx - 0.2e0) * L * te * sin((pi * (-0.2e1 * x - 0.2e1 * y) + 0.2e1 * t * L) / L) + 0.1e0 * pi * te * cos(((-0.4e1 * y - 0.4e1 * x) * pi + 0.4e1 * t * L) / L) + 0.1e0 * pi * te * cos((-0.4e1 * pi * y + 0.2e1 * t * L) / L) + 0.1e0 * pi * te * cos((0.2e1 * t * L - 0.4e1 * pi * x) / L) + ((0.5e0 * h2hy - 0.1e1 * h2hx) * A * pi * dx(te) + (h2hx - 0.15e1 * h2hy) * A * pi * dy(te) + pi * te * ((hhxhy + hhx2) * A + h)) * cos(pi * (0.2e1 * x - 0.2e1 * y) / L) + (-0.25e0 * hy + 0.25e0 * hx) * L * te * sin(pi * (0.2e1 * x - 0.2e1 * y) / L) + 0.1e0 * pi * te * cos(pi * (-0.4e1 * y + 0.4e1 * x) / L)) / L )//
macro fu(t,te)(((((-0.2e0 * hhy - 0.2e0 * hhx) * B * gr - 0.1e1 * d * h2) * pi * dy(tu) + (-0.4e0 * B * gr * hhx - 0.1e1 * d * h2) * pi * dx(tu) + ((0.2e0 + (-0.2e0 * hxhy - 0.2e0 * hy2 - 0.4e0 * hx2) * B) * tu * gr + (-0.2e1 * d * hhx - 0.2e1 * d * hhy) * tu) * pi) * sin((pi * (-0.2e1 * x - 0.2e1 * y) + 0.2e1 * t * L) / L) - 0.5e0 * tu * L * cos((pi * (-0.2e1 * x - 0.2e1 * y) + 0.2e1 * t * L) / L) - 0.125e0 * tu * pi * sin(((-0.4e1 * y - 0.4e1 * x) * pi + 0.4e1 * t * L) / L) + ((0.2e0 * hhy - 0.2e0 * hhx) * B * gr * pi * dy(tu) + 0.4e0 * B * gr * pi * dx(tu) * hhx + (-0.2e0 + (-0.2e0 * hxhy + 0.2e0 * hy2 + 0.4e0 * hx2) * B) * tu * gr * pi) * sin(pi * (0.2e1 * x - 0.2e1 * y) / L) + 0.125e0 * tu * pi * sin(pi * (-0.4e1 * y + 0.4e1 * x) / L)) / L )//
macro fv(t,te)(((((-0.4e0 * hhy - 0.2e0 * hhx) * B * gr - 0.1e1 * d * h2) * pi * dy(tv) + (-0.1e1 * d * h2 - 0.2e0 * B * gr * hhy) * pi * dx(tv) + ((0.2e0 + (-0.4e0 * hxhy - 0.4e0 * hy2) * B) * tv * gr + (-0.2e1 * d * hhx - 0.2e1 * d * hhy) * tv) * pi) * sin((pi * (-0.2e1 * x - 0.2e1 * y) + 0.2e1 * t * L) / L) - 0.5e0 * tv * L * cos((pi * (-0.2e1 * x - 0.2e1 * y) + 0.2e1 * t * L) / L) - 0.125e0 * tv * pi * sin(((-0.4e1 * y - 0.4e1 * x) * pi + 0.4e1 * t * L) / L) + ((-0.4e0 * hhy + 0.2e0 * hhx) * B * gr * pi * dy(tv) + 0.2e0 * B * gr * pi * dx(tv) * hhy + (0.2e0 + (-0.4e0 * hy2 + 0.4e0 * hxhy) * B) * tv * gr * pi) * sin(pi * (0.2e1 * x - 0.2e1 * y) / L) - 0.125e0 * tv * pi * sin(pi * (-0.4e1 * y + 0.4e1 * x) / L)) / L )//