/*
   Propagation of a Tsunami wave near Java island: active generation .
   
   to run this script : FreeFem++ sBBM_Java_Active.edp -ns -v 0
   
   WARNING : don't forget to generate the mesh from the folder "mesh_generation"
   that you wan't to use in this script
   
   Copyright (C) 2020 Georges SADAKA and Denys Dutykh

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.

   -------------------------------------------------------------------------------------
   The main file for propagation of a Tsunami wave near Java island: active generation
   -------------------------------------------------------------------------------------
   Author 1: Georges SADAKA, LMRS -- University of Rouen
   Author 2: Denys Dutykh, CNRS -- LAMA, USMB          
   E-mail 1: Georges.SADAKA@univ-rouen.fr                  
   E-mail 2: Denys.Dutykh@univ-smb.fr   
   Web 1:  http://georges-sadaka.fr/ 
   Web 2:  http://www.denys-dutykh.com/
   Blog 2:   http://dutykh.github.io/    
   GitHub 1: https://github.com/GeorgesSadaka/
   GitHub 2: https://github.com/dutykh/  
   -----------------------------------------------------------------------
   Distributed under GNU General Public License      
   --------------------------------------------------
*/

macro TsuAct true//

verbosity=0;
load "shell"
load "medit"
load "iovtk"
load "isoline"
load "bfstream"
real s0=clock();
bool output=true;
bool outputadapt=false; // output inside adaptGS
bool adapt=true;
bool save=true;
include "../Common_files/Common_Macros.idp"

string method="Adapt_GS"; // Adapt_GS
int Nrestart=50, Nsave=50, Nplot=10, IFrestart=0, iter=IFrestart, filenameRST=0, Ncontd=10, itsave;
bool Paraview=true;// for saving for Paraview
bool Medit=true;// for saving for Tecplot
bool Gnu=true;// for saving for gnuplot

string bathymetryxyz="../Common_files/java2006-787.xyz";
string meshinit="../Common_files/Java_eps_0.01_alpha_100_Dx_0.03.msh";
string fcase="Tsu_Java_Act_"+method;
if(method=="Full") adapt=false;
if(!adapt) fcase="Tsu_Java_Act_Full";
string dircase = "OUTPUT_"+fcase+"/";
createDIR(dircase);

int waitv=0;// wait in the plot
real isoadapt=0.05;
real erradapt=1.e-4;
real smoothadapt = 5.e-9;
real epsadapt=50.e3;
if(adapt) {
   cout<<"Mesh adaptation parameters :"<<endl;
   cout<<"isoadapt="<<isoadapt<<", erradapt="<<erradapt<<", smoothadapt="<<smoothadapt<<", epsadapt="<<epsadapt<<endl;
}
if(adapt) include "../Common_files/adapt_GS.edp"
real gr=9.81;
real theta2=2./3.,theta=sqrt(theta2),mu0=(4.-6.*theta2)/(3.*(1.-theta2)), nu0=0.;//BBM_BBM
real a=.5*(theta2-1./3.)*nu0, b=.5*(theta2-1./3.)*(1.-nu0), c=.5*(1-theta2)*mu0, d=.5*(1-theta2)*(1.-mu0);
real A=-.5*((theta-1.)^2-1./3.),B=1.-theta,At=nu0*(theta-.5)+(1.-nu0)*A;
real T=1750.; // Final simulation time in s

macro ksit(tnm1,tn)((tn-tnm1)/dt)//
macro ksitt(tnm2,tnm1,tn)((tn-2.*tnm1+tnm2)/(dt^2))//
macro F(e,u,v,t)(-((h+KSI+e) * div(u,v) + ([hx,hy]+grad(KSI)+grad(e))'*[u,v] + KSIT)*t 
               + (At*(2.*hhx*dx(KSIT) + 2.*hhy*dy(KSIT)) - A*(-2.*hhxhy*dx(v) + 2.*hhx2*dy(v)))*t 
               + A*((2.*h2hx*dx(u) + h2hy*dx(v))*dx(t) + (h2hy*dx(u) + h2hx*dy(u) + h2hx*dx(v) + 2.*h2hy*dy(v))*dy(t)) )//
macro G(e,u,v,t)(-(gr*(1.-2.*B*hx2-B*hy2)*dx(e) + dx(u)*(u) + dx(v)*(v) - gr*B*hxhy*dy(e) - B*h*dx(KSITT))*t
               + gr*2.*B*hhx*dx(e)*dx(t) + gr*(B*hhy*dx(e) + B*hhx*dy(e))*dy(t) )//
macro H(e,u,v,t)(-(-gr*(2.*B*hxhy)*dx(e) + dy(u)*(u) + dy(v)*(v) + gr*(1.-2*B*hy2)*dy(e) - B*h*dy(KSITT))*t
               + gr*B*hhy*dx(e)*dx(t) + gr*(B*hhx*dx(e) + 2.*B*hhy*dy(e))*dy(t) )//

mesh TSh=square(1,1),ThRec=square(1,1),Th,Thinit;
fespace VSh(TSh,P1);   
VSh href;
real lon0,lat0,Requator=6378137.,Rpole=6356752.,R,coefl0,xc,yc;
real vp = 6000.;// P-wave velocity
real vs = 3400.;// S-wave velocity
real rhoc = 2700.;// crust density
real mu = vs^2*rhoc;
real lambda = (vp^2*rhoc - 2.*mu);// Lame coefficients
real lattc = -9.295, longc = 107.345;// Epicenter location
int Nxf = 21;        // number of subfaults along strike
int Nyf = 7;         // number of subfaults down dip
int Nxyf = Nxf*Nyf;   // total number of fault patches
real[int] xF(Nxyf), yF(Nxyf), IdN(Nxyf), Ti(Nxyf);
real[int] lattF(Nxyf), longF(Nxyf), depth(Nxyf), Slip(Nxyf), Rake(Nxyf);
real L, W, delta, phi;
real tr = 8.0;// Rise time in seconds
real alpha = log(3.)/tr;

if(IFrestart==0){
   cout<<"Create bathymetry mesh from reading file ..."<<endl;
   TSh=triangulate(bathymetryxyz);
   real[int] BB(4);
   boundingbox(TSh,BB);
   VSh fxy,fxySh;
   real aamin = BB[0],bbmax = BB[1],ccmax = BB[2],ddmin = BB[3];
   lon0=.5*(aamin+bbmax);
   lat0=.5*(ddmin+ccmax);
   R=sqrt(((Requator^2*cos(lat0*pi/180.))^2+(Rpole^2*sin(lat0*pi/180.))^2)/((Requator*cos(lat0*pi/180.))^2+(Rpole*sin(lat0*pi/180.))^2));
   coefl0=pi*R/180.;
   yc = movedegkmY(lattc);
   xc = movedegkmX(longc,lattc);
   cout<<"Reading bathymetry from file ..."<<endl;
   {
      ifstream file(bathymetryxyz);real xx,yy;
      for(int i=0;i<fxySh.n;i++)
         file >> xx >> yy >> fxySh[][i];
   }
   VSh usm,vsm;
   real asm=2.e1;
   func gsm=0.;
   cout<<"Smooth the bathymetry ..."<<endl;
   solve smoothbot(usm,vsm)=int2d(TSh)(asm*usm*vsm+grad(usm)'*grad(vsm))-int2d(TSh)(asm*fxySh*vsm)+int1d(TSh,1,2,3,4)(gsm*vsm);
   fxySh=(usm<0.5)-(usm>=0.5);
   usm = (usm>=-100) ? -100. : usm;
   href = 0;
   href = -usm;
   TSh=movemesh(TSh,[(x-lon0)*cos(y*pi/180.)*coefl0,(y-lat0)*coefl0]);
   VSh tmp;tmp[]=href[];href=0;href[]=tmp[];
   real[int] longP = [109.20508, 106.50434, 106.72382, 109.42455];
   real[int] lattP = [-10.37387, -9.45925, -8.82807, -9.74269];
   real[int] xP(4),yP(4);
   for(int i=0;i<=3;i++){
      xP[i]=movedegkmX(longP[i],lattP[i]);
      yP[i]=movedegkmY(lattP[i]);
   }
   L = sqrt((xP[0]-xP[1])^2+(yP[0]-yP[1])^2)/Nxf;// Subfault length
   W = sqrt((xP[0]-xP[3])^2+(yP[0]-yP[3])^2)/Nyf;// Subfault width
   real vr = 1.1e3;// Rupture velocity in m/s
   // ======================================
   // Reading fault patches
   // #Lat. Lon. depth Slip Rake strike dip
   // ======================================
   string datafault="../Common_files/ffault_ext.txt";   
   { ifstream file(datafault); 
      for(int i=0;i<Nxyf;i++)
      file >> lattF(i) >> longF(i) >> depth(i) >> Slip(i) >> Rake(i) >> phi >> delta ; 
   }
   delta *= pi/180.0;  // dip angle
   phi = -(phi - 90.0)*pi/180.0;   // strike angle
   depth *= 1e3; // converted to meters
   Slip *= 1e-2; // converted to meters
   Rake *= pi/180.0;
   // convert to m
   for(int i=0;i<Nxyf;i++){
      xF[i]=movedegkmX(longF[i],lattF[i]);
      yF[i]=movedegkmY(lattF[i]);
   }
   // compute subfault initiation times
   for(int j=0;j<Nxyf;j++)
      Ti(j) = sqrt( (xc-xF(j))^2 + (yc-yF(j))^2 + (0.0 - 0.0*depth(j))^2 )/vr;
   Thinit=readmesh(meshinit);
   Thinit=movemesh(Thinit,[(x-lon0)*cos(y*pi/180.)*coefl0,(y-lat0)*coefl0]);
   Th=Thinit;
   ThRec=Thinit;
   savemesh(TSh,dircaseRST+"RSTTShinit.msh");
   ofstream fv(dircaseRST+"RSTinit.rst");
   real[int] tab=[lon0,lat0,R,coefl0,xc,yc,L,W];
   fv.write(tab);
   fv.write(href[]);
} else {
   TSh=readmesh(DIRRST+"RSTTShinit.msh");
   ifstream fv(DIRRST+"RSTinit.rst");
   real[int] tab(1);
   fv.read(tab);
   href=0;
   fv.read(href[]);
   lon0=tab[0]; lat0=tab[1]; R=tab[2]; coefl0=tab[3]; xc=tab[4]; yc=tab[5]; L=tab[6]; W=tab[7];
   Thinit=readmesh(meshinit);
   Thinit=movemesh(Thinit,[(x-lon0)*cos(y*pi/180.)*coefl0,(y-lat0)*coefl0]);
   if(!adapt) Th=Thinit;
   {
      savemesh(TSh,dircaseRST+"RSTTShinit.msh");
      ofstream fv(dircaseRST+"RSTinit.rst");
      real[int] tab=[lon0,lat0,R,coefl0,xc,yc,L,W];
      fv.write(tab);
      fv.write(href[]);
   }
}

real gauge1x=xc,gauge1y=yc;
real gauge2x=movedegkmX(106.5,-8.),gauge2y=movedegkmY(-8.);
real gauge3x=movedegkmX(105.9,-10.35),gauge3y=movedegkmY(-10.35);
real gauge4x=movedegkmX(107.7,-11.),gauge4y=movedegkmY(-11.);
real gauge1,gauge2,gauge3,gauge4,NRJP,NRJK;
int op=0;
real Tf = 270.; // final time of simulation of the bottom
real t = 0.0; // current time
real dt = 2.0; // time increment in s
real rhowater=1270.;
func ge=0.;   func gu=0.;   func gv=0.;
int k=0;
int[int] fforder2=[1,1,1];

{
   ofstream mat(dircaseGnuplot+"Gauge_"+fcase+".m");
   mat<<"#Time_gauge1_gauge2_gauge3_gauge4_cputime_Ndof_NRJP_NRJK"<<endl;
}

fespace Vhinit(Thinit,P1);
real Dx=2.*checkmovemesh(Thinit,[x,y]);
fespace Wh(ThRec,P1);
Wh winit,w,h,h2,hx,hy,hhxhy,hhx2,h2hx,h2hy,hx2,hy2,hhx,hhy,hxhy;
Wh ksin,ksinm1,ksinm2,KSI,KSIT,KSITT;
h = href;h2 = h^2;hx = dx(h);hy = dy(h); hhx=h*hx; hhy=h*hy; hxhy=hx*hy; hhxhy=hhx*hy; hx2=hx^2; hhx2=h*hx2; hy2=hy^2; h2hx=h2*hx; h2hy=h2*hy;
Wh MAX=-10.,MAXp,FOND=-h,Disp;
fespace Vh(Th,[P1,P1,P1]);
Vh [eta,u,v],[te,tu,tv];
Vh [etapk1, upk1, vpk1], [etak1, uk1, vk1], [etak2, uk2, vk2];
real[int,int] OkadaSolW(Nxyf,Vhinit.ndof);
real[int,int] DispOkadaSol(floor(Tf/dt)+1,Vhinit.ndof);
Vhinit OkaSolW,PlotOKADASOL;

if(IFrestart==0){
   real eps=1.e-16; // numerical error for Okada
   cout<<"Build initial solution from Okada ..."<<endl;
   // Compute Okada Solution
   Vhinit w0;
   for (int j=0;j<Nxyf;j++){
      real x0 = xF(j), y0 = yF(j), d = depth(j), slip = Slip(j), rake = Rake(j);
      if(adapt) ThRec=trunc(Thinit,((x-x0+10.)^2+(y-y0+10.)^2<=(6.*max(L,W))^2)>=erradapt,label=0);
      include "../Common_files/OkadaSol.edp"
      for (int i=0;i<w.n;i++){
         if (abs(w[](i))>=min(abs(w[].min),abs(w[].max))/9.2)
            w[](i)=w[](i);
         else
            w[](i)=0.;
      }
      if(output && !(j % Nplot) ) plot(w,cmm="Okada Solution at j="+j,fill=true,value=true,wait=waitv);
      if(adapt) {
         fespace Whp(ThRec,P1);
         matrix BWinterp=interpolate(Whp,Vhinit,inside=true);
         BWinterp=BWinterp';
         w0[]=BWinterp*w[];
         OkadaSolW(j,:)=w0[](:);
      } else
         OkadaSolW(j,:)=w[](:);
   }
   if(adapt) {
      ThRec=trunc(Thinit,((x-xc+5.)^2+(y-yc+5.)^2<=(4.*max(L,W))^2)>=erradapt,label=0);
      Th=ThRec;
   }
} else {
   cout<<"************** Restart file :: "<<DIRRST+"RST-"+funciterdigits(iter,8)+".rst"<<endl;
   ReadRST(DIRRST,[eta,u,v],MAX,Th,iter,t,itsave);
   ThRec=Th;
   ifstream fv(DIRRST+"RSTksin-"+funciterdigits(iter,8)+".rst");
   ksin=0;
   fv.read(ksin[]);
   plot(ksin);
   h=href;   FOND=-h;   KSI=0.;
   h2 = h^2;hx = dx(h);hy = dy(h); hhx=h*hx; hhy=h*hy; hxhy=hx*hy;
   hhxhy=hhx*hy; hx2=hx^2; hhx2=h*hx2; hy2=hy^2; h2hx=h2*hx; h2hy=h2*hy;  
}

// Boundary conditions
int[int] lab=[0,labels(Thinit)];
macro BCk1
   - int1d(Th,lab)((b*ge*h2 - dt*A*(gu*(3.*h2hx+h2hy) + gv*(h2hx+3.*h2hy)))*te) + on(lab,uk1=0.,vk1=0.)
   /*- int1d(Th,lab)((d*gu*h2 - dt*B*ge*gr*(3.*hhx+hhy))*tu) - int1d(Th,lab)((d*gv*h2 - dt*B*ge*gr*(3.*hhx+hhy))*tv)*/
//
macro BCk2
   - int1d(Th,lab)((b*ge*h2 - dt*A*(gu*(3.*h2hx+h2hy) + gv*(h2hx+3.*h2hy)))*te) + on(lab,uk2=0.,vk2=0.)
   /*- int1d(Th,lab)((d*gu*h2 - dt*B*ge*gr*(3.*hhx+hhy))*tu) - int1d(Th,lab)((d*gv*h2 - dt*B*gr*ge*(3.*hhx+hhy))*tv)*/
//

while(t<=T && STOP) {
   if(adapt & (iter>IFrestart | iter==0) & ( (!(k%3) & k>0 & t<=Tf) | ( t>Tf & !(iter % 25) ) ) ){
      Wh uadapt=eta+u+v;
      if(outputadapt && !(iter % Nplot)){
         plot(uadapt,fill=true,dim=2,value=true,wait=waitv,cmm="uadapt"+uadapt[].max+"min"+uadapt[].min);
         Wh Peta=(abs(uadapt)>erradapt);
         plot(Peta,fill=true,dim=2,value=true,wait=waitv,cmm="Peta");
      }
      mesh Thp=ThRec;
      { AdaptGS(Thp,uadapt,erradapt,isoadapt,smoothadapt,epsadapt,Thinit,outputadapt,waitv); }
      fespace Whp(Thp,P1);
      matrix BWinterp=interpolate(Wh,Whp,inside=true);
      BWinterp=BWinterp';
      macro interp1(n) #n#P[]=BWinterp*p#n[]; //
      macro interp2(n) n=#n#P; //
      Wh pDisp=Disp,pksin=ksin,pksinm1=ksinm1,pksinm2=ksinm2;
      Wh pKSIT=KSIT,pKSITT=KSITT,pkm1,pkm2;
      Whp DispP,ksinP,ksinm1P,ksinm2P,KSITP,KSITTP,km1P,km2P;
      if(t<=Tf) {
         pkm1[]=DispOkadaSol(k-1,:);   pkm2[]=DispOkadaSol(k-2,:);
         interp1(Disp);interp1(ksinm1);interp1(ksinm2);interp1(KSIT);
         interp1(KSITT);interp1(km1);interp1(km2);
      }
      interp1(ksin);
      Wh pKSI=KSI,peta=eta,pu=u,pv=v,pMAX=MAX;
      Whp KSIP,etaP,uP,vP,MAXP;
      interp1(KSI);interp1(eta);interp1(u);interp1(v);interp1(MAX);
      ThRec=Thp;
      Th=ThRec;
      if(t<=Tf) {
         interp2(Disp);interp2(ksinm1);interp2(ksinm2);
         interp2(KSIT);interp2(KSITT);
         DispOkadaSol(k-2,:)=km2P[](:);   DispOkadaSol(k-1,:)=km1P[](:);
      }
      interp2(ksin);
      interp2(KSI);interp2(MAX);
      [eta,u,v]=[etaP,uP,vP];   h=href;
      h2 = h^2;hx = dx(h);hy = dy(h); hhx=h*hx; hhy=h*hy; hxhy=hx*hy;
      hhxhy=hhx*hy; hx2=hx^2; hhx2=h*hx2; hy2=hy^2; h2hx=h2*hx; h2hy=h2*hy;
      op=0;
   }
   if(t<=Tf){
      Disp = 0.;
      for (int j=0;j<Nxyf;j++){
         if(heaviside(t-Ti(j))){
            OkaSolW[]=OkadaSolW(j,:);
            if(adapt){
               fespace Whp(ThRec,P1);
               Whp OkaSolWp;
               matrix BWinterp=interpolate(Whp,Vhinit,inside=true);
               OkaSolWp[]=BWinterp*OkaSolW[];
               Disp = Disp + heaviside(t-Ti(j))*(1 - exp(-alpha*(t-Ti(j))))*OkaSolWp;
            } else {
               Disp = Disp + heaviside(t-Ti(j))*(1 - exp(-alpha*(t-Ti(j))))*OkaSolW;
            }
         }
      }
      if(output && !(iter % Nplot) ) plot(Thinit,Disp,cmm="Java bottom displacement at t="+(t)+"s.",value=true,fill=true,wait=waitv,dim=2);
      DispOkadaSol(k,:)=Disp[](:);
      if(t==0.){
         ksinm2[]=DispOkadaSol(k,:);
         ksinm1=ksinm2;
         ksin=ksinm1;
      } else if (t==dt){
         ksinm2[]=DispOkadaSol(k-1,:);
         ksinm1[]=DispOkadaSol(k,:);
         ksin=ksinm1;
      } else {
         ksinm2[]=DispOkadaSol(k-2,:);
         ksinm1[]=DispOkadaSol(k-1,:);
         ksin[]=DispOkadaSol(k,:);
      }
      KSI=ksin;
      KSIT=ksit(ksinm1,ksin);
      KSITT=ksitt(ksinm2,ksinm1,ksin);
      k++;
   } else {
      KSI=ksin;   KSIT=0.;   KSITT=0.;
   }
   gauge1=eta(gauge1x,gauge1y);
   gauge2=eta(gauge2x,gauge2y);
   gauge3=eta(gauge3x,gauge3y);
   gauge4=eta(gauge4x,gauge4y);
   NRJP=.5*rhowater*9.81*int2d(Th)(eta^2);
   Wh w0=-(KSIT+u*(dx(eta)+hx+dx(KSI))+v*(dy(eta)+hy+dy(KSI)))-(dx(u)+dy(v))*(eta+h+KSI);
   NRJK=.5*rhowater*int2d(Th)((eta+h+KSI)*(u^2+v^2)+w0^2);
/* Save main physical and numerical results in 1D files (Gnuplot) */
   {
      ofstream mat(dircaseGnuplot+"Gauge_"+fcase+".m",append);
      mat<<t<<" "<<gauge1<<" "<<gauge2<<" "<<gauge3<<" "<<gauge4<<" "<<clock()-s0<<" "<<Wh.ndof<<" "<<NRJP<<" "<<NRJK<<endl;
   }
   if(!(iter % 10)) cout<<"time = "<<t<<", gauge1 = "<<gauge1<<", gauge2 = "<<gauge2<<", gauge3 = "<<gauge3<<", gauge4 = "<<gauge4<<", cputime = "<<clock()-s0<<", ndof = "<<Wh.ndof<<", NRJP = "<<NRJP<<", NRJK = "<<NRJK<<endl;
/* Save output files containing the velocity and elevation fields */
   if(!(iter % Nsave) && save){
      FOND=-h-KSI;
      MAX=max(MAX,eta);
      savevtk(dircaseParaview+"/Propagation_"+fcase+".1"+funciterdigits(itsave,8)+".vtu",Th,FOND,eta,order=fforder2,dataname="bottom solution", bin=true);
      savemesh(Th,dircaseMedit+fcase+"_BBM_MAX.1"+funciterdigits(itsave,8)+".mesh");
      savesol(dircaseMedit+fcase+"_BBM_MAX.1"+funciterdigits(itsave,8)+".sol",Th,MAX);
      savemesh(Th,dircaseMedit+fcase+"_BBM_SOL.1"+funciterdigits(itsave,8)+".mesh");
      savesol(dircaseMedit+fcase+"_BBM_SOL.1"+funciterdigits(itsave,8)+".sol",Th,eta);
      itsave++;
   }
/* Save a restart */
   if(!(iter%Nrestart) && save){
      SaveRST(dircaseRST,[eta,u,v],MAX,Th,iter,t,itsave);
      {
         ofstream fv(dircaseRST+"RSTksin-"+funciterdigits(iter,8)+".rst");
         fv.write(ksin[]);
      }
   }
/* Plot the solution within FreeFem window */
   if(output && !(iter % Nplot)) plot(eta,fill=true,value=true,dim=2,wait=waitv,cmm="eta, t= "+t);
   solveproblem
   iter++;t+=dt;
/* Check for a clean stop */
   if(!(iter%Ncontd)) {
      {
         ofstream fv(dircaseRST+"RSTksin-"+funciterdigits(iter,8)+".rst");
         fv.write(ksin[]);
      }
      cleanstop(dircase);
   }
   op=1;
}
cout << " CPU time = " << clock()-s0 << endl;